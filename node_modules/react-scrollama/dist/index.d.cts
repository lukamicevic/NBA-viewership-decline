import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';

/**
 * Represents the direction of scrolling.
 */
type ScrollamaDirection = "up" | "down" | "left" | "right";
/**
 * Represents the direction of the trigger line.
 */
type TriggerLineDirection = "vertical" | "horizontal";
/**
 * Interface for the data passed to Scrollama callback functions.
 * @template T - The type of custom data associated with each step.
 */
interface ScrollamaCallbackData<T = unknown> {
    /** The DOM element of the step */
    element: Element;
    /** Custom data associated with the step */
    data: T;
    /** The direction of scrolling */
    direction: ScrollamaDirection;
    /** The IntersectionObserverEntry for the step */
    entry: IntersectionObserverEntry;
}
/**
 * Interface for the data passed to Scrollama progress callback functions.
 * Extends ScrollamaCallbackData with progress information.
 * @template T - The type of custom data associated with each step.
 */
interface ScrollamaProgressCallbackData<T = unknown> extends ScrollamaCallbackData<T> {
    /** The progress of the step through the threshold, from 0 to 1 */
    progress: number;
}
/**
 * Type for Scrollama callback functions.
 * @template T - The type of custom data associated with each step.
 */
type ScrollamaCallback<T = unknown> = (data: ScrollamaCallbackData<T>) => void;
/**
 * Type for Scrollama progress callback functions.
 * @template T - The type of custom data associated with each step.
 */
type ScrollamaProgressCallback<T = unknown> = (data: ScrollamaProgressCallbackData<T>) => void;
/**
 * Interface for the props of the Scrollama component.
 * @template T - The type of data associated with each step.
 */
interface ScrollamaProps<T = unknown> {
    /**
     * The direction of the trigger line.
     * @default "horizontal"
     */
    direction?: TriggerLineDirection;
    /**
     * Whether to show visual debugging tools.
     * @default false
     */
    debug?: boolean;
    /**
     * The child elements to be wrapped by Scrollama.
     */
    children: React.ReactNode;
    /**
     * How far from the top of the viewport to trigger a step.
     * Can be a number from 0 to 1 (as a proportion of view height) or a pixel value (e.g. "300px").
     * @default 0.3
     */
    offset?: string | number;
    /**
     * Callback that fires when the top or bottom edge of a step enters the offset threshold.
     */
    onStepEnter?: ScrollamaCallback<T>;
    /**
     * Callback that fires when the top or bottom edge of a step exits the offset threshold.
     */
    onStepExit?: ScrollamaCallback<T>;
    /**
     * Callback that fires the progress a step has made through the threshold.
     */
    onStepProgress?: ScrollamaProgressCallback<T>;
    /**
     * Granularity of the progress interval in pixels (smaller = more granular).
     * @default 4
     */
    threshold?: number;
    /**
     * The root element of the IntersectionObserver.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver#root
     */
    rootRef?: React.RefObject<Element>;
}
/**
 * Interface for the props of a Step component in Scrollama.
 * @template T - The type of data associated with the step.
 */
interface StepProps<T = unknown> {
    /**
     * The child element to be rendered within the Step.
     * Must be a valid React element with class attributes.
     */
    children: React.ReactElement & React.ClassAttributes<React.ReactElement>;
    /**
     * Optional data associated with this step.
     */
    data?: T;
}
interface ScrollamaProvideProps<T = unknown> {
    /**
     * The direction of the trigger line.
     */
    direction?: TriggerLineDirection;
    /**
     * The last known scroll position.
     */
    lastScrollPosition?: number;
    /**
     * The offset value for triggering the step.
     */
    offset?: number;
    /**
     * The threshold for progress calculations.
     */
    progressThreshold?: number | number[];
    /**
     * The size of the container.
     */
    containerSize?: number;
    /**
     * The root element of the IntersectionObserver.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver#root
     */
    rootRef?: React.RefObject<Element>;
    /**
     * Callback fired when the step enters the viewport.
     */
    onStepEnter?: ScrollamaCallback<T>;
    /**
     * Callback fired when the step exits the viewport.
     */
    onStepExit?: ScrollamaCallback<T>;
    /**
     * Callback fired to report progress as the step moves through the viewport.
     */
    onStepProgress?: ScrollamaProgressCallback<T>;
    /**
     * Function to update the last known scroll position.
     */
    handleSetLastScrollPosition?: (scrollPosition: number) => void;
}

interface DebugOffsetProps {
    offset: string | number;
    containerSize: number;
    stickySize: number;
    isHasRoot?: boolean;
    direction: TriggerLineDirection;
}
declare const DebugOffset: React.FC<DebugOffsetProps>;

/**
 * Checks if the given offset is in pixels.
 *
 * @param offset - The offset to check.
 * @returns Returns true if the offset is a string and includes 'px', otherwise false.
 */
declare function isOffsetInPixels(offset: unknown): boolean;
/**
 * Creates an array of threshold values for intersection observer.
 *
 * @param theta - The step size for creating thresholds.
 * @param height - The total height to be divided into thresholds.
 * @returns An array of threshold values between 0 and 1.
 */
declare const createThreshold: (theta: number, height: number) => number[];
/**
 * Checks if the current environment is a browser.
 *
 * @returns {boolean} Returns true if running in a browser environment, false otherwise.
 */
declare const isBrowser: boolean;
declare const isHorizontal: (direction: TriggerLineDirection) => direction is "horizontal";
/**
 * Calculates the root margin for the Intersection Observer based on the given offset.
 *
 * @param {Object} params - The parameters object.
 * @param {number} params.offset - The offset value, typically between 0 and 1.
 * @param {TriggerLineDirection} params.direction - The direction of the trigger line.
 * @returns {string} The calculated root margin string in the format "top right bottom left".
 */
declare const getRootMargin: ({ offset, direction, }: {
    offset: number;
    direction: TriggerLineDirection;
}) => string;
interface GetProgressRootMarginParams {
    offset: number;
    nodeSize: number;
    containerSize: number;
    direction: TriggerLineDirection;
}
/**
 * Calculates the root margin for progress tracking based on scroll direction and element dimensions.
 *
 * @param {Object} params - The parameters for calculating the root margin.
 * @param {number} params.offset - The offset value, typically between 0 and 1.
 * @param {number} params.nodeSize - The size of the node.
 * @param {number} params.containerSize - The size of the container.
 * @param {TriggerLineDirection} params.direction - The direction of the trigger line.
 * @returns {string} The calculated root margin string in the format "top right bottom left".
 */
declare const getProgressRootMargin: ({ offset, nodeSize, containerSize, direction, }: GetProgressRootMarginParams) => string;

declare const Step: React.FC<StepProps>;

declare const Scrollama: <T = unknown>({ direction, debug, children, offset, onStepEnter, onStepExit, onStepProgress, threshold, rootRef, }: ScrollamaProps<T>) => react_jsx_runtime.JSX.Element;

/**
 * @see https://react.dev/reference/react/createContext#createcontext
 */
declare const ScrollamaProvide: react.Context<ScrollamaProvideProps<unknown>>;

export { DebugOffset, Scrollama, type ScrollamaCallback, type ScrollamaCallbackData, type ScrollamaDirection, type ScrollamaProgressCallback, type ScrollamaProgressCallbackData, type ScrollamaProps, ScrollamaProvide, type ScrollamaProvideProps, Step, type StepProps, type TriggerLineDirection, createThreshold, getProgressRootMargin, getRootMargin, isBrowser, isHorizontal, isOffsetInPixels };
